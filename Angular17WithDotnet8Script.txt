================================
üí° Workshop Angular 17 with .NET 8  üí°
================================

‚ö° DAY 1

1: Installing tool MacOS and Windows
2: What new in Angular 17
3: Angular CLI 17.3.x
-------------------------------------------------------
üöÄ1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
üíª .NET 8 SDK
---
dotnet --version

üíª Node JS 20.x and up
---
node -v
npm -v
ppx -v

üíª Angular 17 Cli
---
ng version

üíª PostgreSQL 15/16
---
psql --version

üíª Git
---
git version

üíª VSCode
---
code -v

üöÄ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÅ‡∏£‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Angular CLI 17.3.x ‡πÅ‡∏ö‡∏ö Standalone Component
---
üíª  ng new [project_name]
üíª  ng new myApp

‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ VSCode ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡πÜ
---
code myApp -r

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÅ‡∏ö‡∏ö NgModules Component
---
ng new myApp --no-standalone

</> ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
ng serve
‡∏´‡∏£‡∏∑‡∏≠
ng s
---
‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà http://localhost:4200

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ run ‡∏ó‡∏µ‡πà port ‡∏≠‡∏∑‡πà‡∏ô 
üíª ng serve  --port 4400

üöÄ 2. What new in Angular 17
---
- Support Typescript 5.2-4, No Missing Commas
- Build-In Control Flow
- View Transition API¬†
- Deferrable views
- Server Side Rendering and Hydration
- New lifecycle hooks
- Input value transforms & new input, output 
- New model with signal 2 way data binding 
- Upgrade ==> https://update.angular.io

-------------------------------------------------------
‚ö° DAY 2

4: Standalone Components & LifeCycle
5: Template Syntax
6: Data Binding & Directives
7: Services & Dependency Injection
8: Routing & Navigation
-------------------------------------------------------

Step 1: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á Angular 17
‡πÅ‡∏ö‡∏ö Standalone Component
---
üíª ng new ng17app-demo

Step 2: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ vscod
---
üíª code ng17app-demo

Step 3: ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏î‡∏π‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö
---
ng s
‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö
http://localhost:4200

Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á component ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞
---
ng g c home --skip-tests
ng g c about --skip-tests
ng g c contact --skip-tests
ng g c register --skip-tests
ng g c login --skip-tests
ng g c navbar --skip-tests
ng g c footer --skip-tests

Step 5: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á bootstrap 5.x ‡πÑ‡∏ß‡πâ‡∏ó‡∏≥‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á design ‡∏Å‡∏±‡∏ô‡∏ô‡∏∞
---
npm i bootstrap@5

Step 6: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Config ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Bootstrap ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå angular.json
---
            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.scss"
            ],
            "scripts": [
              "node_modules/bootstrap/dist/js/bootstrap.bundle.js"
            ]

Step 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Bootstrap ‡∏î‡∏π‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå navbar.component.html
---
<ul class="bg-success">
</ul>

Step 8: ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π‡∏™‡∏¥
---
ng s

Step 9: ‡πÑ‡∏´‡∏ô‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á google font ‡∏•‡∏á‡πÑ‡∏õ‡∏ã‡∏¥ ‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå index.html
---
<link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai:wght@100;200;300;400;500;600;700&display=swap" rel="stylesheet">

Step 10: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ font ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå style.scss
---
body {
    padding: 0;
    margin: 0;
    font-family: "IBM Plex Sans Thai", sans-serif;
}

Step 11: ‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á layout ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏£‡∏ß‡∏°‡∏£‡πà‡∏≤‡∏á ‡πÄ‡∏°‡∏ô‡∏π ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
---
ng g c layouts/frontLayout

‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ layout ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå front-layout.component.html
---
<app-navbar></app-navbar>
<router-outlet></router-outlet>
<app-footer></app-footer>

Step 12: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Routing ‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå app.routes.ts
---
import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { FrontLayoutComponent } from './layouts/front-layout/front-layout.component';

export const routes: Routes = [
    {
        path: '',
        component: FrontLayoutComponent,
        children: [
            {
                path: '',
                component: HomeComponent
            },
  }
];

Step 13: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå app.component.html
---
<router-outlet />

Step 14: ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π
---
ng s

Step 15: ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á navbar.component.html 
---
<header class="p-3 text-bg-dark">
    <div class="container">
      <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">
        <a href="/" class="d-flex align-items-center mb-2 mb-lg-0 text-white text-decoration-none">
          <svg class="bi me-2" width="40" height="32" role="img" aria-label="Bootstrap"><use xlink:href="#bootstrap"></use></svg>
        </a>

        <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
          <li><a href="#" class="nav-link px-2 text-secondary">Home</a></li>
          <li><a href="#" class="nav-link px-2 text-white">Features</a></li>
          <li><a href="#" class="nav-link px-2 text-white">Pricing</a></li>
          <li><a href="#" class="nav-link px-2 text-white">FAQs</a></li>
          <li><a href="#" class="nav-link px-2 text-white">About</a></li>
        </ul>

        <form class="col-12 col-lg-auto mb-3 mb-lg-0 me-lg-3" role="search">
          <input type="search" class="form-control form-control-dark text-bg-dark" placeholder="Search..." aria-label="Search">
        </form>

        <div class="text-end">
          <button type="button" class="btn btn-outline-light me-2">Login</button>
          <button type="button" class="btn btn-warning">Sign-up</button>
        </div>
      </div>
    </div>
  </header>

Step 16: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Validation form login
---
login.component.html
---
<div class="container mt-5 mb-5">
    <main class="form-signin w-25 m-auto">
        <form [formGroup]="loginForm">
            <div class="text-center">
                <img class="mb-4" src="xxx" alt="" width="72" height="57">
            </div>
            
            <h1 class="h3 mb-3 fw-normal text-center">Login</h1>
        
            <div class="form-floating mb-2">
                <input 
                    formControlName="email"
                    name="email"
                    type="email" 
                    class="form-control" 
                    id="floatingInput">
                <label for="floatingInput">Email</label>
                @if(submitted && loginForm.controls['email'].errors){
                    @if(loginForm.controls['email'].errors['required']){
                        <div class="text-danger my-2">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô email</div>
                    }
                    @if(loginForm.controls['email'].errors['email']){
                        <div class="text-danger my-2">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>
                    }
                }
            </div>

            <div class="form-floating">
                <input 
                    formControlName="password"
                    name="password"
                    type="password" 
                    class="form-control" 
                    id="floatingPassword">
                <label for="floatingPassword">Password</label>
                @if(submitted && loginForm.controls['password'].errors){
                    @if(loginForm.controls['password'].errors['required']){
                        <div class="text-danger my-2">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô password</div>
                    }
                    @if(loginForm.controls['password'].errors['minlength']){
                        <div class="text-danger my-2">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</div>
                    }
                }
            </div>
        
            <div class="form-check text-start my-3">
                <input class="form-check-input" type="checkbox" value="remember-me" id="flexCheckDefault">
                <label class="form-check-label" for="flexCheckDefault">
                Remember me
                </label>
            </div>

            <button 
                class="btn btn-primary w-100 py-2" 
                type="submit"
                (click)="submitLogin()"
                >Sign in
            </button>

            <button 
                class="btn btn-warning w-100 py-2 mt-2" 
                type="submit"
                (click)="resetForm()"
                >Reset
            </button>
            
            <!-- {{ userLogin.email }}
            {{ userLogin.password }} -->

        </form>
    </main>
</div>

login.component.ts
---
import { Component } from '@angular/core'
import { 
  ReactiveFormsModule, 
  FormsModule,
  FormGroup,
  FormBuilder,
  Validators
} from '@angular/forms'

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [ReactiveFormsModule, FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.scss'
})
export class LoginComponent {

  // FormGroup
  loginForm!: FormGroup
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ submit form ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  submitted = false

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
  userLogin = {
    "email": "",
    "password": ""
  }

  // Constructor
  constructor(
    private formBuilder: FormBuilder
  ){
  }

  // ngOnInit
  ngOnInit(){
    this.loginForm = this.formBuilder.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    })
  }

  submitLogin(){

    this.submitted = true

    // ‡∏ñ‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Invalid)
    if(this.loginForm.invalid){
      return
    } else {
      this.userLogin.email = this.loginForm.value.email
      this.userLogin.password = this.loginForm.value.password

      if(this.userLogin.email == "admin@email.com" && this.userLogin.password == "123456"){
        alert("Login Success")
      } else {
        alert("Login Fail")
      }

    }
  }

  resetForm(){
    this.submitted = false
    this.loginForm.reset()
  }

}

-------------------------------------------------------
‚ö° DAY 3

Section 9: Forms & Validation
Section 10: HTTP Client & RxJS
Section 11: Angular Material
-------------------------------------------------------

Step 1:  ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á library ‡∏Ç‡∏≠‡∏á bootstrap icon
---
npm i bootstrap-icons@1.11.3

Step 2: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á SweetAlert 2 ‡πÑ‡∏ß‡πâ‡∏ó‡∏≥ popup
---
npm i sweetalert2@11.11.1

Step 3: ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á Navbar ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
---
<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top" aria-label="Eleventh navbar example">
  <div class="container">
    <a class="navbar-brand" routerLink="" data-bs-toggle="collapse" data-bs-target=".navbar-collapse.show">Foodie</a>

    <div class="d-block">
      <button class="btn btn-success d-lg-none" routerLink="/login" data-bs-toggle="collapse" data-bs-target=".navbar-collapse.show">‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô</button>
      <button class="btn btn-primary mx-2 d-lg-none" routerLink="/register" data-bs-toggle="collapse" data-bs-target=".navbar-collapse.show">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</button>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsExample09" aria-controls="navbarsExample09" aria-expanded="true" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
    </div>

    <div class="navbar-collapse collapse" id="navbarsExample09" style="">
        
      <ul class="navbar-nav me-auto mb-2 mb-lg-0 text-center text-lg-start">
          <li class="nav-item">
            <a class="nav-link" routerLink="" data-bs-toggle="collapse" data-bs-target=".navbar-collapse.show">‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/about"  data-bs-toggle="collapse" data-bs-target=".navbar-collapse.show">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/contact"  data-bs-toggle="collapse" data-bs-target=".navbar-collapse.show">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false">‡∏ú‡∏•‡∏á‡∏≤‡∏ô</a>
            <ul class="dropdown-menu">
              <li><a href="#abc" class="dropdown-item">‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</a></li>
              <li><a href="#abc" class="dropdown-item">‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö</a></li>
              <li><a href="#abc" class="dropdown-item">‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</a></li>
            </ul>
          </li>
        </ul>
        <form role="search">
          <input class="form-control" type="search" placeholder="Search" aria-label="Search">
        </form>

      <div class="text-center text-sm-start my-3 my-sm-0 d-none d-lg-block">
        <button class="btn btn-success mx-2" routerLink="/login">‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô</button>
        <button class="btn btn-primary" routerLink="/register">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</button>
      </div>
    </div>

  </div>
</nav>

navbar.component.css
---
.nav-link {
    color: #fff;
    font-size: 1.2rem;
    font-weight: 400;
    margin: 0 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    transition: all 0.3s ease;
}

@media (max-width: 768px) {

    li:first-child {
            margin-top: 20px;
    }

    .nav-link {
        border: 1px solid #f8f9fa;
        border-radius: 5px;
        padding: 0.8rem 1rem;
        margin: 0.2rem 0;
    }

}

Step: 4 ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á footer.component.html
---
<footer class="bg-secondary text-white">
  <div class="container">
    <footer class="py-5">
      <div class="row">
        <div class="col-6 col-md-2 mb-3">
          <h1>Menus</h1>
          <ul class="nav flex-column">
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">Home</a></li>
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">Features</a></li>
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">Pricing</a></li>
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">FAQs</a></li>
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">About</a></li>
          </ul>
        </div>
  
        <div class="col-6 col-md-2 mb-3">
          <h1>Services</h1>
          <ul class="nav flex-column">
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">Home</a></li>
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">Features</a></li>
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">Pricing</a></li>
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">FAQs</a></li>
            <li class="nav-item mb-2"><a href="#" class="nav-link p-0 text-body-secondary">About</a></li>
          </ul>
        </div>
  
        <div class="col-md-5 offset-md-1 mb-3">
          <form>
            <h1>Subscribe to our newsletter</h1>
            <p>Monthly digest of what's new and exciting from us.</p>
            <div class="d-flex flex-column flex-sm-row w-100 gap-2">
              <label for="newsletter1" class="visually-hidden">Email address</label>
              <input id="newsletter1" type="text" class="form-control" placeholder="Email address">
              <button class="btn btn-primary" type="button">Subscribe</button>
            </div>
          </form>
        </div>
      </div>
  
      <div class="d-flex flex-column flex-sm-row justify-content-between py-4 my-4 border-top">
        <p>¬© 2024 Company, Inc. All rights reserved.</p>
        <ul class="list-unstyled d-flex">
          <li class="ms-3"><a class="link-body-emphasis" href="#twitter" aria-label="Social twitter">
            <i class="bi bi-twitter-x text-white"></i></a>
          </li>
          <li class="ms-3"><a class="link-body-emphasis" href="#ig" aria-label="Social instragram">
            <i class="bi bi-instagram text-white"></i></a>
          </li>
          <li class="ms-3"><a class="link-body-emphasis" href="#fb" aria-label="Social facebook">
            <i class="bi bi-facebook text-white"></i></a>
          </li>
        </ul>
      </div>
    </footer>
  </div>
</footer>

footer.component.scss
---
h1{
    font-size: 1.25rem;
}

.nav-link {
    color: #fff !important;
    font-size: 1.2rem;
}

Step 5: config angular.json ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ icon ‡πÅ‡∏•‡∏∞ sweetalert
---

"styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "node_modules/bootstrap-icons/font/bootstrap-icons.scss",
              "node_modules/sweetalert2/src/sweetalert2.scss",
              "src/styles.scss"
            ],

Step 6: ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á front-layout.component.html
---
<app-navbar />
<div class="pt-5">
    <router-outlet />
</div>
<app-footer />


Step 7: ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤ home.component.html
---
<div id="carouselExample" class="carousel slide">
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img ngSrc="assets/images/slides/food1.webp" alt="slide1" class="d-block" width="1920" height="600" priority sizes="(min-width: 375px) 100vw, 50vw">
    </div>
    <div class="carousel-item">
      <img ngSrc="assets/images/slides/food2.webp" alt="slide2" class="d-block" width="1920" height="600" priority sizes="(min-width: 375px) 100vw, 50vw">
    </div>
    <div class="carousel-item">
      <img ngSrc="assets/images/slides/food3.webp" alt="slide3" class="d-block" width="1920" height="600" priority sizes="(min-width: 375px) 100vw, 50vw">
    </div>
  </div>
  <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
</div>

<div class="container">
<div class="row g-4 py-5 row-cols-1 row-cols-lg-3">
  <div class="feature col text-center">
    <div class="feature-icon">
      <i class="bi bi-droplet-half" style="font-size: 4rem; color: cornflowerblue;"></i>
    </div>
    <h2>Smart life</h2>
    <p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>
    <a href="#demo" class="icon-link">
      More info
      <i class="bi bi-chevron-right"></i>
    </a>
  </div>
  <div class="feature col text-center">
    <div class="feature-icon">
      <i class="bi bi-brilliance" style="font-size: 4rem; color: cornflowerblue;"></i>
    </div>
    <h2>Balancer</h2>
    <p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>
    <a href="#demo" class="icon-link">
      More info
      <i class="bi bi-chevron-right"></i>
    </a>
  </div>
  <div class="feature col text-center">
    <div class="feature-icon">
      <i class="bi bi-cake2-fill" style="font-size: 4rem; color: cornflowerblue;"></i>
    </div>
    <h2>Food tech</h2>
    <p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>
    <a href="#demo" class="icon-link">
      More info
      <i class="bi bi-chevron-right"></i>
    </a>
  </div>
</div>
</div>

---
home.componenet.ts
---
import { NgOptimizedImage } from '@angular/common';
import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [NgOptimizedImage],
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss'
})
export class HomeComponent {

}

---
home.component.scss
---
@media (max-width: 1200px) {
    img {
        width: 100% !important;
        height: auto !important;
    }
}

@media (max-width: 768px) {
    img {
        height: 300px !important;
        object-fit: cover;
    }
}

Step 8: ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤ login.component.html
---
<div class="container mt-5 mb-5">
    <main class="form-signin col-md-4 offset-md-4">
        <form [formGroup]="loginForm">
            
            <div class="text-center">
                <img class="mb-4" ngSrc="assets/images/aavelogo.webp" alt="" width="100" height="100" priority>
            </div>
        
            <div class="form-floating mb-2">
                <input 
                    formControlName="email"
                    name="email"
                    type="email" 
                    class="form-control" 
                    id="floatingInput">
                <label for="floatingInput">Email</label>
                @if(submitted && loginForm.controls['email'].errors){
                    @if(loginForm.controls['email'].errors['required']){
                        <div class="text-danger my-2">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô email</div>
                    }
                    @if(loginForm.controls['email'].errors['email']){
                        <div class="text-danger my-2">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>
                    }
                }
            </div>

            <div class="form-floating">
                <input 
                    formControlName="password"
                    name="password"
                    type="password" 
                    class="form-control" 
                    id="floatingPassword">
                <label for="floatingPassword">Password</label>
                @if(submitted && loginForm.controls['password'].errors){
                    @if(loginForm.controls['password'].errors['required']){
                        <div class="text-danger my-2">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô password</div>
                    }
                    @if(loginForm.controls['password'].errors['minlength']){
                        <div class="text-danger my-2">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</div>
                    }
                }
            </div>
        
            <div class="form-check text-start my-3">
                <input class="form-check-input" type="checkbox" value="remember-me" id="flexCheckDefault">
                <label class="form-check-label" for="flexCheckDefault">
                Remember me
                </label>
            </div>

            <button 
                class="btn btn-primary w-100 py-2" 
                type="submit"
                (click)="submitLogin()"
                >Sign in
            </button>

            <button 
                class="btn btn-warning w-100 py-2 mt-2" 
                type="submit"
                (click)="resetForm()"
                >Reset
            </button>
            
            <!-- {{ userLogin.email }}
            {{ userLogin.password }} -->

        </form>
    </main>
</div>

---
login.component.ts
---
import { NgOptimizedImage } from '@angular/common'

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [..., NgOptimizedImage],
  templateUrl: './login.component.html',
  styleUrl: './login.component.scss'
})

-------------------------------------------------------
‚ö° DAY 4

Section 12: Introduction to .NET Core 8
Section 13: Create Project .NET 8 Rest API
-------------------------------------------------------
üõ†1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
üíª .NET SDK 8.x
---
dotnet --version

üíª PostgreSQL
---
psql --version

üöÄ2: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ .NET Core 8
---
‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà .NET 6 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡∏°‡∏≤ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÑ‡∏î‡πâ 2 approaches ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ 

1. controller-based APIs
2. minimal APIs

Minimal API: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ quickly ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö

Controller-based API: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

Minimal API:
---
‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:

‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ lambda expression
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö async/await ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢:

‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î
‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ routing ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô

Controller-based API:
---
‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:

‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö middleware
‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢:

‡πÇ‡∏Ñ‡πâ‡∏î‡∏¢‡∏≤‡∏ß ‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ Minimal API

3: ‡∏™‡∏£‡πâ‡∏≤‡∏á .NET 8 Rest API

üöÄ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå .NET Core Web API ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô .NET 8
---
Step 1: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå WorkshopAngularDotnet
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Web APIs ‡πÅ‡∏ö‡∏ö Controller-based APIs
---
dotnet new webapi --use-controllers -o ControllerAPI

Step 2: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô VSCode
---
code ControllerAPI

Step 3: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
dotnet watch run

üíª ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á REST API ‡∏î‡πâ‡∏ß‡∏¢ .NET Web API ‡πÅ‡∏ö‡∏ö Controller-base APIs
---
Step 1: ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå ControllerAPI ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå Controller/WeatherForecastController.cs
‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå WeatherForecast.cs

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á model ‡πÉ‡∏ô Models/User
---
namespace ControllerAPI.Models;
public class User
{
    public int Id { get; set; }
    public required string Username { get; set; }
    public required string Email { get; set; }
    public required string Fullname { get; set; }
}

Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á UserController ‡πÉ‡∏ô Controllers
---
using Microsoft.AspNetCore.Mvc;
using WebApi.Models;

namespace ControllerAPI.Controllers;

[ApiController]
[Route("api/[controller]")] // api/User
public class UserController : ControllerBase
{
    // mock data for users
    private static readonly List<User> _users = new List<User>
    {
        new User { 
            Id = 1, 
            Username = "john", 
            Email = "john@email.com", 
            Fullname = "John Doe"
        },
        new User { 
            Id = 2, 
            Username = "samit", 
            Email = "samit@email.com", 
            Fullname = "Samit Koyom"
        },
    };

    // GET: api/User
    [HttpGet]
    public ActionResult<IEnumerable<User>> GetUsers()
    {
        // IEnumerable ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
        // IEnumerable ‡πÄ‡∏õ‡πá‡∏ô interface ‡πÉ‡∏ô .NET Framework ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô collection ‡∏Ç‡∏≠‡∏á object
        // interface ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î method ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡∏∑‡∏≠ GetEnumerator()
        // GetEnumerator() : method ‡∏ô‡∏µ‡πâ return enumerator
        // enumerator : object ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô collection
        // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ IEnumerable ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á users

        // ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô collection ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ foreach
        // foreach (var user in _users)
        // {
        //     Console.WriteLine($"{user.Id} - {user.Username}");
        // }

        return Ok(_users);
    }

    // GET: api/User/{id}
    [HttpGet("{id}")]
    public ActionResult<User> GetUser(int id)
    {
        var user = _users.Find(u => u.Id == id); // find user by id
        if (user == null)
        {
            return NotFound();
        }
        return Ok(user);
    }


    // POST: api/User
    [HttpPost]
    public ActionResult<User> CreateUser([FromBody] User user)
    {
        _users.Add(user);
        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
    }

    // PUT: api/User/{id}
    [HttpPut("{id}")]
    public IActionResult UpdateUser(int id, [FromBody] User user)
    {
        // Validate user id
        if (id != user.Id)
        {
            return BadRequest();
        }

        // Find existing user
        var existingUser = _users.Find(u => u.Id == id);
        if (existingUser == null)
        {
            return NotFound();
        }

        // Update user
        existingUser.Username = user.Username;
        existingUser.Email = user.Email;
        existingUser.Fullname = user.Fullname;

        // Return updated user
        return Ok(existingUser);
    }

    // DELETE: api/User/2
    [HttpDelete("{id}")]
    public ActionResult DeleteUser(int id)
    {
        // Find existing user
        var user = _users.Find(u => u.Id == id);

        if (user == null)
        {
            return NotFound();
        }

        // Remove user from list
        _users.Remove(user);
        return NoContent();
    }

}

-------------------------------------------------------
‚ö° DAY 5

14: EF Core with PostgreSQL
15: .NET 8 CRUD and Upload File
16: .NET 8 JWT and Swagger
-------------------------------------------------------
üöÄ WORKSHOP: StockAPI with EF8 PG

Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå WebAPI
---
dotnet new webapi --use-controllers -o DotnetStockAPI

Step 2: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ VSCode
---
code DotnetStockAPI -r

"‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô EFCore ‡πÅ‡∏ö‡∏ö Database first"

Step 3: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏ä‡∏∑‡πà‡∏≠ "dotnetstockdb"
---
CREATE DATABASE dotnetstockdb;

Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á "category" ‡πÅ‡∏•‡∏∞ "product"
---
‡∏ï‡∏≤‡∏£‡∏≤‡∏á "category"
----
CREATE TABLE category(  
    categoryid SERIAL PRIMARY KEY,
    categoryname VARCHAR(64) NOT NULL,
   categorystatus INT NOT NULL
);

---
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á "category"
---
insert into category (categoryname, categorystatus) 
values ('Mobile',1) , ('Tablet',1), ('Smart Watch',1), ('Laptop',1);

---
‡∏ï‡∏≤‡∏£‡∏≤‡∏á  "product"
---
CREATE TABLE product(  
    productid SERIAL PRIMARY KEY,
    productname VARCHAR(128) NULL,
    unitprice DECIMAL(18,2) NULL,
    unitinstock INT NULL,
    productpicture VARCHAR(256) NULL,
    categoryid INT NOT NULL,
    createddate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modifieddate TIMESTAMP NULL
);

---
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á "product"
---
INSERT INTO product (
    productname,
    unitprice,
    unitinstock,
    productpicture,
    categoryid,
    createddate,
    modifieddate
) VALUES
(
    'iPhone 13 Pro Max',
    55000,
    3,
    'https://www.mxphone.com/wp-content/uploads/2021/04/41117-79579-210401-iPhone12ProMax-xl-1200x675.jpg',
    1,
    '2021-11-22T00:00:00',
    '2021-11-22T00:00:00'
),
(
    'iPad Pro 2021',
    18500,
    10,
    'https://cdn.siamphone.com/spec/apple/images/ipad_pro_12.9%E2%80%91inch/com_1.jpg',
    2,
    '2021-11-20T00:00:00',
    '2021-11-20T00:00:00'
),
(
    'Airpods Pro',
    12500,
    5,
    'https://www.avtechguide.com/wp-content/uploads/2020/11/leaked-apple-airpods-pro-generation2-info_01-800x445.jpg',
    3,
    '2021-11-10T10:30:00',
    '2021-11-12T10:30:00'
),
(
    'Macbook Pro M1',
    45000,
    10,
    'https://cdn.mos.cms.futurecdn.net/iYCQTPgBSdDmkYESfPkunh.jpg',
    4,
    '2021-11-15T10:30:00',
    '2021-11-15T10:30:00'
);

Step 5: Install NuGet Packages for EF8 and MSSQL Server
---
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.0
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.Relational --version 8.0.0

Step 6: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dotnet-ef cli
---
‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
dotnet ef --version

‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
dotnet tool install --global dotnet-ef

‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
dotnet tool update --global dotnet-ef

Step 7: ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Scaffold-DbContext (Reverse engineer)
---
SQL Server Authen
---
dotnet ef dbcontext scaffold ^"Server=SAMITZ50;^
Initial Catalog=storedb;^
Persist Security Info=False;^
User ID=sa;^
Password=377040;^
MultipleActiveResultSets=True;^
Encrypt=True;^
TrustServerCertificate=True;^
Connection Timeout=30;^" ^
Microsoft.EntityFrameworkCore.SqlServer ^
--output-dir "Models" ^
--context ApplicationDbContext ^
--use-database-names ^
--no-onconfiguring ^
--no-pluralize ^
--force

Windows Authen
---
dotnet ef dbcontext scaffold ^"Server=SAMITZ50\SQLEXPRESS;^
Database=storedb;^
TrustServerCertificate=True;^
Trusted_Connection=True;^" ^
Microsoft.EntityFrameworkCore.SqlServer ^
--output-dir Models ^
--context ApplicationDbContext ^
--use-database-names ^
--no-onconfiguring ^
--force

PostgreSQL
‚Äî
Windows/Cmd
‚Äî
dotnet ef dbcontext scaffold "Host=localhost;Port=5432;Database=storedb;Username=postgres;Password=123456" ^
Npgsql.EntityFrameworkCore.PostgreSQL ^
--output-dir "Models" ^
--context ApplicationDbContext ^
--use-database-names ^
--no-onconfiguring ^
--force

MacOS
‚Äî
dotnet ef dbcontext scaffold "Host=localhost;Port=5432;Database=storedb;Username=postgres;Password=123456" \
Npgsql.EntityFrameworkCore.PostgreSQL \
--output-dir "Models" \
--context ApplicationDbContext \
--use-database-names \
--no-onconfiguring \
--force


Step 8: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå appsettings.json ‡πÄ‡∏û‡∏¥‡πà‡∏° connection string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
---
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=stockdb;Username=postgres;Password=123456"
  },

Step 9: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Package ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ Authentication ‡∏î‡πâ‡∏ß‡∏¢ JWT
---
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.0
dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 8.0.0

Step 10: ‡πÄ‡∏û‡∏¥‡πà‡∏° JWT ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå appsettings.json
---
"JWT": {  
    "ValidAudience": "*",  
    "ValidIssuer": "*",  
    "Secret": "ByYM000OLlMQG6VVVp1OH7Xzyr7gHuw1qvUC5dcGt3SNM"  
  },

Step 11: ‡πÄ‡∏û‡∏¥‡πà‡∏° Config ‡∏Ç‡∏≠‡∏á JWT ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Program.cs
---
using DotnetStockAPI.Models;
using Microsoft.EntityFrameworkCore;
.
.
// For Entity Framework with Npgsql
builder.Services.AddDbContext<ApplicationDbContext>(options => 
{
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"));
});

.
.
// Adding Identity
builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();

// Adding Authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
})
// Adding Jwt Bearer
.AddJwtBearer(options  => {
    options.SaveToken = true;
    options.RequireHttpsMetadata = false;
    options.TokenValidationParameters = new TokenValidationParameters()
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidAudience = builder.Configuration.GetSection("JWT:ValidAudience").Value!,
        ValidIssuer = builder.Configuration.GetSection("JWT:ValidIssuer").Value!,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration.GetSection("JWT:Secret").Value!))
    };
});
.
.
builder.Services.AddSwaggerGen(
    options =>
    {
        options.SupportNonNullableReferenceTypes();
        options.SwaggerDoc("v1", new() { Title = "StockAPI", Version = "v1" });

        options.AddSecurityDefinition("Bearer",  new OpenApiSecurityScheme()
        {
            Name = "Authorization",
            Type = SecuritySchemeType.ApiKey,
            Scheme = "Bearer",
            BearerFormat= "JWT",
            In = ParameterLocation.Header,
            Description = "JWT Authorization header using the Bearer scheme."
        });

        options.AddSecurityRequirement(new OpenApiSecurityRequirement
        {
            {
                new OpenApiSecurityScheme
                {
                    Reference = new OpenApiReference
                    {
                        Type = ReferenceType.SecurityScheme,
                        Id = "Bearer"
                    }
                },
                new string[] {}
            }
        });
    }
);

.
.
// Add Authentication
app.UseAuthentication();

Step 12: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå Data/ApplicationDbContext.cs
---
 public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

}


Step 13: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå Migration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auth
---
dotnet ef migrations add auth --context ApplicationDbContext

# ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Migration
-
dotnet ef migrations remove

Step 14: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Migrate ‡∏ï‡∏±‡∏ß Migration ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
---
dotnet ef database update

# ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ rollback ‡∏Å‡∏≤‡∏£ Migrate
-
dotnet ef database update 0

Step 15: ‡∏™‡∏£‡πâ‡∏≤‡∏á Model RegisterModel.cs
---
using System.ComponentModel.DataAnnotations;

namespace DotnetStockAPI.Models;

public class RegisterModel
{
    [Required(ErrorMessage = "Username is required")]
    [StringLength(50, ErrorMessage = "Username is too long")]
    [MinLength(3, ErrorMessage = "Username is too short")]
    public required string Username { get; set; }
    
    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Email is not valid")]
    public required string Email { get; set; }
    
    [Required(ErrorMessage = "Password is required")]
    public required string Password { get; set; }
}

Step 16: ‡∏™‡∏£‡πâ‡∏≤‡∏á Model LoginModel.cs
---
using System.ComponentModel.DataAnnotations;

namespace DotnetStockAPI.Models;
public class LoginModel
{
    [Required(ErrorMessage = "Username is required")]
    [StringLength(50, ErrorMessage = "Username is too long")]
    [MinLength(3, ErrorMessage = "Username is too short")]
    public string? Username { get; set; }
    
    [Required(ErrorMessage = "Password is required")]
    public string? Password { get; set; }
}

Step 17: ‡∏™‡∏£‡πâ‡∏≤‡∏á Model UserRoles.cs
---
namespace StockAPI.Models;

public class UserRolesModel
{
    public const string Admin = "Admin";
    public const string Manager = "Manager";
    public const string User = "User";
}

Step 18: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ResponseModel.cs ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API
---
namespace StockAPI.Models;

public class ResponseModel
{
    public string? Status { get; set; }
    public string? Message { get; set; }
}

Step 19: ‡∏™‡∏£‡πâ‡∏≤‡∏á Controller ‡∏ä‡∏∑‡πà‡∏≠ "AuthenticateController"
---
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using StockAPI.Models;

namespace StockAPI.Controllers;

[ApiController]
[Route("api/[controller]")]
public class AuthenticateController: ControllerBase
{
    private readonly UserManager<IdentityUser> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;
    private readonly IConfiguration _configuration;

    // Constructor
    public AuthenticateController(
        UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager, 
        IConfiguration configuration)
    {
        _userManager = userManager;
        _roleManager = roleManager;
        _configuration = configuration;
    }

    // Register for User
    // Post api/authenticate/register-user
    [HttpPost]
    [Route("register-user")]
    public async Task<ActionResult> RegisterUser([FromBody] RegisterModel model)
    {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        var userExists = await _userManager.FindByNameAsync(model.Username);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User already exists!"
                }
            );
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        userExists = await _userManager.FindByEmailAsync(model.Email);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "Email already exists!"
                }
            );
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User
        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        var result = await _userManager.CreateAsync(user, model.Password);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if(!result.Succeeded)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User creation failed! Please check user details and try again."
                }
            );
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Roles Admin, Manager, User
        if (!await _roleManager.RoleExistsAsync(UserRolesModel.Admin))
        {
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.Admin));
        }

        if (!await _roleManager.RoleExistsAsync(UserRolesModel.Manager))
        {
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.Manager));
        }

        if (await _roleManager.RoleExistsAsync(UserRolesModel.User))
        {
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.User));
            await _userManager.AddToRoleAsync(user, UserRolesModel.User);
        }

        return Ok(new ResponseModel
        {
            Status = "Success",
            Message = "User registered successfully"
        });
    }


    // Register for Manager
    // Post api/authenticate/register-manger
    [HttpPost]
    [Route("register-manger")]
    public async Task<ActionResult> RegisterManager([FromBody] RegisterModel model)
    {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        var userExists = await _userManager.FindByNameAsync(model.Username);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User already exists!"
                }
            );
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        userExists = await _userManager.FindByEmailAsync(model.Email);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "Email already exists!"
                }
            );
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User
        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        var result = await _userManager.CreateAsync(user, model.Password);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if(!result.Succeeded)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User creation failed! Please check user details and try again."
                }
            );
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Roles Admin, Manager, User
        if (!await _roleManager.RoleExistsAsync(UserRolesModel.Admin)){
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.Admin));
        }

        if (!await _roleManager.RoleExistsAsync(UserRolesModel.User)){
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.User));
        }

        if (await _roleManager.RoleExistsAsync(UserRolesModel.Manager)){
            await _userManager.AddToRoleAsync(user, UserRolesModel.Manager);
        }

        return Ok(new ResponseModel
        {
            Status = "Success",
            Message = "User registered successfully"
        });
    }

    // Register for Admin
    // Post api/authenticate/register-manger
    [HttpPost]
    [Route("register-admin")]
    public async Task<ActionResult> RegisterAdmin([FromBody] RegisterModel model)
    {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        var userExists = await _userManager.FindByNameAsync(model.Username);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User already exists!"
                }
            );
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        userExists = await _userManager.FindByEmailAsync(model.Email);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "Email already exists!"
                }
            );
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User
        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        var result = await _userManager.CreateAsync(user, model.Password);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if(!result.Succeeded)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User creation failed! Please check user details and try again."
                }
            );
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Roles Admin, Manager, User
        if (await _roleManager.RoleExistsAsync(UserRolesModel.Admin)){
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.Admin));
            await _userManager.AddToRoleAsync(user, UserRolesModel.Admin);
        }

        if (!await _roleManager.RoleExistsAsync(UserRolesModel.User)){
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.User));
        }

        if (!await _roleManager.RoleExistsAsync(UserRolesModel.Manager)){
            await _userManager.AddToRoleAsync(user, UserRolesModel.Manager);
        }

        return Ok(new ResponseModel
        {
            Status = "Success",
            Message = "User registered successfully"
        });
    }

    // Login for User
    // Post api/authenticate/login-user
    [HttpPost("login")]
    public async Task<ActionResult> Login([FromBody] LoginModel model)
    {

        var user = await _userManager.FindByNameAsync(model.Username!);

        // ‡∏ñ‡πâ‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if(user != null && await _userManager.CheckPasswordAsync(user, model.Password!))
        {
            var userRoles = await _userManager.GetRolesAsync(user);

            var authClaims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.UserName!),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            };

            foreach (var userRole in userRoles)
            {
                authClaims.Add(new Claim(ClaimTypes.Role, userRole));
            }

            var token = GetToken(authClaims);

            return Ok(new 
            {
                token = new JwtSecurityTokenHandler().WriteToken(token),
                expiration = token.ValidTo
            });
        }

        // ‡∏ñ‡πâ‡∏≤ login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return Unauthorized();
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Token
    private JwtSecurityToken GetToken(List<Claim> authClaims)
    {
        var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JWT:Secret"]!));

        var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time"); // Windows time zone ID

        // Get the current time in Bangkok time zone
        var currentTime = TimeZoneInfo.ConvertTime(DateTime.UtcNow, timeZoneInfo);

        var token = new JwtSecurityToken(
            issuer: _configuration["JWT:ValidIssuer"],
            audience: _configuration["JWT:ValidAudience"],
            expires: currentTime.AddHours(3),
            claims: authClaims,
            signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)
        );

        return token;
    }
}

Step 20: Build and Publish .NET Core Web API
---
dotnet publish -c Release

Download Install the ASP.NET Core Module/Hosting Bundle
---
https://dotnet.microsoft.com/permalink/dotnetcore-current-windows-runtime-bundle-installer

